//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

float bias;
float softThreshold;
float4 PS(psInput input) : SV_Target
{
	float threshold = 1 + bias;
	float4 c = texture2d.Sample(linearSampler,input.uv);
	
	float l = dot(c.xyz, float3(.299, .587, .114));
	
	float knee = softThreshold * threshold;
	float soft = pow(min(knee*2, max(0, l - threshold + knee)), 2);
	float nom = 4 * knee * .00001;
	
	soft /= nom;
	
	float v = max(l - threshold, soft) / max(l, .00001);
	return c * saturate(v);
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



