Texture2D aoTex : PREVIOUS;
Texture2D depthTex;

#define BLURRADIUS 10
float BlurSharpeness = 1.0;

float2 RTexelSize : INVTARGETSIZE;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


void FetchAoAndDepth(float2 uv, inout float ao, inout float depth) {
	ao = aoTex.Sample(linearSampler, uv).r;
	depth = depthTex.Sample(linearSampler,uv).r;
}

float CrossBilateralWeight(float r, float d, float d0) {
	const float BlurSigma = BLURRADIUS * 0.5;
	const float BlurFalloff = 1 / (2 * BlurSigma * BlurSigma);

    float dz = (d0 - d) * .2 * BlurSharpeness;
	return exp2(-r * r * BlurFalloff - dz * dz);
}

void ProcessSample(float2 aoz, float r, float d0, inout float totalAO, inout float totalW) {
	float w = CrossBilateralWeight(r, d0, aoz.y);
	totalW += w;
	totalAO += w * aoz.x;
}

void ProcessRadius(float2 uv0, float2 deltaUV, float d0, inout float totalAO, inout float totalW) {
	float ao, z;
	float2 uv;
	float r = 1;

	[unroll]
	for (; r <= BLURRADIUS / 2; r += 1) {
		uv = uv0 + r * deltaUV;
		FetchAoAndDepth(uv, ao, z);
		ProcessSample(float2(ao, z), r, d0, totalAO, totalW);
	}

	[unroll]
	for (; r <= BLURRADIUS; r += 2) {
		uv = uv0 + (r + 0.5) * deltaUV;
		FetchAoAndDepth(uv, ao, z);
		ProcessSample(float2(ao, z), r, d0, totalAO, totalW);
	}
}

float2 BilateralBlur(float2 uv, float2 deltaUV){
	float totalAO, depth;
	FetchAoAndDepth(uv, totalAO, depth);
	float totalW = 1;

	ProcessRadius(uv, -deltaUV, depth, totalAO, totalW);
	ProcessRadius(uv, deltaUV, depth, totalAO, totalW);

	totalAO /= totalW;
	return float2(totalAO, depth);
}

float2 PS_BlurX(psInput input) : SV_Target{
	float2 uv = input.uv;
	float2 ao = BilateralBlur(uv, float2(RTexelSize.x, 0));
	return ao;
}

float4 PS_BlurY(psInput input) : SV_Target{
	float2 uv = input.uv;
	float2 ao = BilateralBlur(uv, float2(0, RTexelSize.y));
	return float4(ao.xxx, 1.0);
}

technique10 Process
{
	pass P1<string format = "R16G16_Float";>{
		SetPixelShader(CompileShader(ps_4_0,PS_BlurX()));
	}
	pass P2<string format = "R16G16B16A16_Float";>{
		SetPixelShader(CompileShader(ps_4_0,PS_BlurY()));
	}
}



