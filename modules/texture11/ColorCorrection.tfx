//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;

float contrast<float uimin = 0.0;> = 1.0;
float gamma<float uimin = 0.0;> = 1.0;

float saturation = 0.0;
float hue = 0.0;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};


// RGB->HSL->RGB Code in : http://www.chilliant.com/rgb2hsv.html
float RGBCVtoHUE(in float3 RGB, in float C, in float V){
      float3 Delta = (V - RGB) / C;
      Delta.rgb -= Delta.brg;
      Delta.rgb += float3(2,4,6);
      // NOTE 1
      Delta.brg = step(V, RGB) * Delta.brg;
      float H;
	
      H = max(Delta.r, max(Delta.g, Delta.b));

      return frac(H / 6);
}

float3 RGBtoHSL(in float3 RGB){
	float3 HSL = 0;
    float U, V;

    U = -min(RGB.r, min(RGB.g, RGB.b));
    V = max(RGB.r, max(RGB.g, RGB.b));

    HSL.z = (V - U) * 0.5;
    float C = V + U;
    if (C != 0)
    {
      HSL.x = RGBCVtoHUE(RGB, C, V);
      HSL.y = C / (1 - abs(2 * HSL.z - 1));
    }
    return HSL;
}

float3 HUEtoRGB(in float H){
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R,G,B));
}

float3 HSLtoRGB(in float3 HSL){
    float3 RGB = HUEtoRGB(HSL.x);
    float C = (1 - abs(2 * HSL.z - 1)) * HSL.y;
    return (RGB - 0.5) * C + HSL.z;
}

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

float4 PS(psInput input) : SV_Target
{
	float3 c = texture2d.Sample(linearSampler,input.uv).xyz;
	c = (c - .5) * contrast + .5;
	c = pow(abs(c), 1 / gamma);
	float3 hsl = RGBtoHSL(c);
	hsl.y = saturate(hsl.y + saturation);
	hsl.x = frac(hsl.x + hue);
	c = HSLtoRGB(hsl);
	return float4(c, 1.0);;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



