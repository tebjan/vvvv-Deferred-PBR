Texture2D depthTex : PREVIOUS;

float4x4 tIP;

float maxCoC = .02;
float wscale<string uiname = "World Scale";> = 100; 

//Camera Info
float fov;
float F<string uiname = "f-stop"; float uimin = .5;> = 2.8;
static const float sensorSize = 35;

float fdepth;

float LinearDepth(float2 uv, float depth){
	float4 p = mul(float4(uv, depth, 1.0), tIP);
	return p.z / p.w;
}

float FoculLength(float focus){
	return (focus * sensorSize / 2) / (tan(fov / 2) * focus + sensorSize / 2);
}

float ImageDistance(float focus, float flength){
	return focus * flength / (focus - flength);
}

float EffectiveFstop(float V, float focus){
	return (1 + (V / focus)) * F;
}

float CoCRad(float V, float D, float z, float focus){
	return (V * D / focus * (z - focus) / z) / sensorSize;
}

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float PS(psInput input) : SV_Target
{
	float d = depthTex.SampleLevel(linearSampler, input.uv, 0).r;
	float depth = LinearDepth(input.uv, d)*wscale;
	//float2 fuv = (focus*float2(1,-1)) * .5 + .5;
	//float focusdepth = LinearDepth(fuv, depthTex.SampleLevel(linearSampler, fuv, 0).r)*100;
	float focusdepth = fdepth*wscale;
	
	float f = FoculLength(focusdepth);
	float V = ImageDistance(focusdepth, f);
	float Fe = EffectiveFstop(V, focusdepth);
	float D = V / Fe;
	float CoC = CoCRad(V, D, depth, focusdepth);
	return clamp(CoC, -maxCoC, maxCoC) / maxCoC;
}

technique10 CoC
{
	pass P0<string format = "R32_Float";>
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



