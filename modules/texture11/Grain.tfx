//The MIT License (MIT) Copyright (c) 2015 Matt DesLauriers
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
//documentation files (the "Software"), to deal in the Software without restriction, 
//including without limitation the rights to use, copy, modify, merge, publish, distribute, 
//sublicense, and/or sell copies of the Software, and to permit persons to whom the Software 
//is furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
//INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
//PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
//LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
//TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
//OTHER DEALINGS IN THE SOFTWARE.
//
//https://github.com/mattdesl/glsl-film-grain?source=post_page-----47abe74df74e----------------------

#include "../fxh/NoiseFunc.fxh"
Texture2D texture2d : PREVIOUS;

float2 resolution : TARGETSIZE;
float frame = 0;
float multScale = 1.0;
float scale = 1.0;
SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

float grain(float2 texCoord, float2 resolution, float frame, float multiplier) {
    float2 mult = texCoord * resolution;
    float offset = simplexNoise(float3(mult / multiplier, frame));
    float n1 = Perlin(float3(mult, offset), float3(1.0/texCoord * resolution, 1.0));
    return n1 / 2.0 + 0.5;
}

float4 Grain(psInput input) : SV_Target
{
	float c = grain(input.uv, resolution / scale, frame, multScale);
	return c;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,Grain()));
	}
}



