Texture2D texture2d : PREVIOUS;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

float exposure = 1.0;

float3 luminance(float3 x){
	float3 lumcoeff = float3(.299, .581, .144);
	return dot(x, lumcoeff).xxx;
}

float3 ACESFilmicCurve(float3 x){
	float a = 2.51;
	float b = .03;
	float c = 2.43;
	float d = .59;
	float e = .14;
	
	return saturate((x * (a*x + b)) / (x * (c*x + d) + e));
}

float3 RainhardCurve(float3 x){
	return x / (1.0 + x);
}

float3 ALUFilmicCurve(float3 x){
	float3 c = max(0.0, x - .004);
	return (c * (c * 6.2 + .5)) / (c * (c * 6.2 + 1.7) + .06);
}

float3 UnrealCurve(float3 x){
	return x / (x + .155) * 1.019;
}

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 ACES_Tonemap(psInput input) : SV_Target
{
	float3 c = texture2d.Sample(linearSampler, input.uv).rgb;
	//c = pow(abs(c), 1/2.2);
	return float4(pow(abs(ACESFilmicCurve(c * exposure)), 1/2.2), 1);
}

float4 Rainhard_Tonemap(psInput input) : SV_Target
{
	float3 c = texture2d.Sample(linearSampler, input.uv).rgb;
	//c = pow(abs(c), 1/2.2);
	return float4(pow(abs(RainhardCurve(c * exposure)), 1/2.2), 1);
}

float4 ALU_Tonemap(psInput input) : SV_Target
{
	float3 c = texture2d.Sample(linearSampler, input.uv).rgb;
	return float4(ALUFilmicCurve(c * exposure), 1);
}

float4 Unreal_Tonemap(psInput input) : SV_Target
{
	float3 c = texture2d.Sample(linearSampler, input.uv).rgb;
	return float4(UnrealCurve(c * exposure), 1);
}

technique10 ACES
{
	pass P0<string format="R8G8B8A8_Unorm";>
	{
		SetPixelShader(CompileShader(ps_4_0,ACES_Tonemap()));
	}
}

technique10 Rainhard
{
	pass P0<string format="R8G8B8A8_Unorm";>
	{
		SetPixelShader(CompileShader(ps_4_0,Rainhard_Tonemap()));
	}
}

technique10 ALU
{
	pass P0<string format="R8G8B8A8_Unorm";>
	{
		SetPixelShader(CompileShader(ps_4_0,ALU_Tonemap()));
	}
}

technique10 Unreal
{
	pass P0<string format="R8G8B8A8_Unorm";>
	{
		SetPixelShader(CompileShader(ps_4_0,Unreal_Tonemap()));
	}
}



