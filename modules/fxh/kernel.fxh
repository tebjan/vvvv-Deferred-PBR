//
// Kino/Bokeh - Depth of field effect
//
// Copyright (C) 2016 Unity Technologies
// Copyright (C) 2015 Keijiro Takahashi
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//



#if !defined(KERNEL_SMALL) && !defined(KERNEL_MEDIUM) && \
    !defined(KERNEL_LARGE) && !defined(KERNEL_VERYLARGE) && !defined(KERNEL_ULTRA)

static const uint kSampleCount = 1;
static const float2 kDiskKernel[1] = { float2(0, 0) };

#endif

#if defined(KERNEL_SMALL)

// rings = 2
// points per ring = 5
static const uint kSampleCount = 16;
static const float2 kDiskKernel[kSampleCount] = {
    float2(0,0),
    float2(0.54545456,0),
    float2(0.16855472,0.5187581),
    float2(-0.44128203,0.3206101),
    float2(-0.44128197,-0.3206102),
    float2(0.1685548,-0.5187581),
    float2(1,0),
    float2(0.809017,0.58778524),
    float2(0.30901697,0.95105654),
    float2(-0.30901703,0.9510565),
    float2(-0.80901706,0.5877852),
    float2(-1,0),
    float2(-0.80901694,-0.58778536),
    float2(-0.30901664,-0.9510566),
    float2(0.30901712,-0.9510565),
    float2(0.80901694,-0.5877853),
};

#endif

#if defined(KERNEL_MEDIUM)

// rings = 3
// points per ring = 7
static const uint kSampleCount = 22;
static const float2 kDiskKernel[kSampleCount] = {
    float2(0,0),
    float2(0.53333336,0),
    float2(0.3325279,0.4169768),
    float2(-0.11867785,0.5199616),
    float2(-0.48051673,0.2314047),
    float2(-0.48051673,-0.23140468),
    float2(-0.11867763,-0.51996166),
    float2(0.33252785,-0.4169769),
    float2(1,0),
    float2(0.90096885,0.43388376),
    float2(0.6234898,0.7818315),
    float2(0.22252098,0.9749279),
    float2(-0.22252095,0.9749279),
    float2(-0.62349,0.7818314),
    float2(-0.90096885,0.43388382),
    float2(-1,0),
    float2(-0.90096885,-0.43388376),
    float2(-0.6234896,-0.7818316),
    float2(-0.22252055,-0.974928),
    float2(0.2225215,-0.9749278),
    float2(0.6234897,-0.7818316),
    float2(0.90096885,-0.43388376),
};

#endif

#if defined(KERNEL_LARGE)

// rings = 4
// points per ring = 7
static const uint kSampleCount = 43;
static const float2 kDiskKernel[kSampleCount] = {
    float2(0,0),
    float2(0.36363637,0),
    float2(0.22672357,0.28430238),
    float2(-0.08091671,0.35451925),
    float2(-0.32762504,0.15777594),
    float2(-0.32762504,-0.15777591),
    float2(-0.08091656,-0.35451928),
    float2(0.22672352,-0.2843024),
    float2(0.6818182,0),
    float2(0.614297,0.29582983),
    float2(0.42510667,0.5330669),
    float2(0.15171885,0.6647236),
    float2(-0.15171883,0.6647236),
    float2(-0.4251068,0.53306687),
    float2(-0.614297,0.29582986),
    float2(-0.6818182,0),
    float2(-0.614297,-0.29582983),
    float2(-0.42510656,-0.53306705),
    float2(-0.15171856,-0.66472363),
    float2(0.1517192,-0.6647235),
    float2(0.4251066,-0.53306705),
    float2(0.614297,-0.29582983),
    float2(1,0),
    float2(0.9555728,0.2947552),
    float2(0.82623875,0.5633201),
    float2(0.6234898,0.7818315),
    float2(0.36534098,0.93087375),
    float2(0.07473,0.9972038),
    float2(-0.22252095,0.9749279),
    float2(-0.50000006,0.8660254),
    float2(-0.73305196,0.6801727),
    float2(-0.90096885,0.43388382),
    float2(-0.98883086,0.14904208),
    float2(-0.9888308,-0.14904249),
    float2(-0.90096885,-0.43388376),
    float2(-0.73305184,-0.6801728),
    float2(-0.4999999,-0.86602545),
    float2(-0.222521,-0.9749279),
    float2(0.07473029,-0.99720377),
    float2(0.36534148,-0.9308736),
    float2(0.6234897,-0.7818316),
    float2(0.8262388,-0.56332),
    float2(0.9555729,-0.29475483),
};

#endif



#if defined(KERNEL_VERYLARGE)

// rings = 5
// points per ring = 7
static const uint kSampleCount = 71;
static const float2 kDiskKernel[kSampleCount] = {
    float2(0,0),
    float2(0.2758621,0),
    float2(0.1719972,0.21567768),
    float2(-0.061385095,0.26894566),
    float2(-0.24854316,0.1196921),
    float2(-0.24854316,-0.11969208),
    float2(-0.061384983,-0.2689457),
    float2(0.17199717,-0.21567771),
    float2(0.51724136,0),
    float2(0.46601835,0.22442262),
    float2(0.32249472,0.40439558),
    float2(0.11509705,0.50427306),
    float2(-0.11509704,0.50427306),
    float2(-0.3224948,0.40439552),
    float2(-0.46601835,0.22442265),
    float2(-0.51724136,0),
    float2(-0.46601835,-0.22442262),
    float2(-0.32249463,-0.40439564),
    float2(-0.11509683,-0.5042731),
    float2(0.11509732,-0.504273),
    float2(0.32249466,-0.40439564),
    float2(0.46601835,-0.22442262),
    float2(0.7586207,0),
    float2(0.7249173,0.22360738),
    float2(0.6268018,0.4273463),
    float2(0.47299224,0.59311354),
    float2(0.27715522,0.7061801),
    float2(0.056691725,0.75649947),
    float2(-0.168809,0.7396005),
    float2(-0.3793104,0.65698475),
    float2(-0.55610836,0.51599306),
    float2(-0.6834936,0.32915324),
    float2(-0.7501475,0.113066405),
    float2(-0.7501475,-0.11306671),
    float2(-0.6834936,-0.32915318),
    float2(-0.5561083,-0.5159932),
    float2(-0.37931028,-0.6569848),
    float2(-0.16880904,-0.7396005),
    float2(0.056691945,-0.7564994),
    float2(0.2771556,-0.7061799),
    float2(0.47299215,-0.59311366),
    float2(0.62680185,-0.4273462),
    float2(0.72491735,-0.22360711),
    float2(1,0),
    float2(0.9749279,0.22252093),
    float2(0.90096885,0.43388376),
    float2(0.7818315,0.6234898),
    float2(0.6234898,0.7818315),
    float2(0.43388364,0.9009689),
    float2(0.22252098,0.9749279),
    float2(0,1),
    float2(-0.22252095,0.9749279),
    float2(-0.43388385,0.90096885),
    float2(-0.62349,0.7818314),
    float2(-0.7818317,0.62348956),
    float2(-0.90096885,0.43388382),
    float2(-0.9749279,0.22252093),
    float2(-1,0),
    float2(-0.9749279,-0.22252087),
    float2(-0.90096885,-0.43388376),
    float2(-0.7818314,-0.6234899),
    float2(-0.6234896,-0.7818316),
    float2(-0.43388346,-0.900969),
    float2(-0.22252055,-0.974928),
    float2(0,-1),
    float2(0.2225215,-0.9749278),
    float2(0.4338835,-0.90096897),
    float2(0.6234897,-0.7818316),
    float2(0.78183144,-0.62348986),
    float2(0.90096885,-0.43388376),
    float2(0.9749279,-0.22252086),
};

#endif

/* Precomputed table of concentric samples.
 * Generated using this algorithm http://l2program.co.uk/900/concentric-disk-sampling
 * Sorted by radius then by rotation angle.
 * This way it's better for cache usage and for
 * easily restricting to a certain number of
 * sample while still having a circular kernel. */

#if defined(KERNEL_ULTRA)

static const uint kSampleCount = 256;
static const float2 kDiskKernel[kSampleCount] = {
    float2(0.0441941738242, 0.0441941738242),
    float2(-0.0441941738242, -0.0441941738242),
    float2(-0.0441941738242, 0.0441941738242),
    float2(0.0441941738242, -0.0441941738242),
    float2(0.181111092429, 0.0485285709567),
    float2(0.132582521472, 0.132582521472),
    float2(-0.181111092429, 0.0485285709567),
    float2(0.0485285709567, 0.181111092429),
    float2(-0.181111092429, -0.0485285709567),
    float2(-0.0485285709567, 0.181111092429),
    float2(-0.132582521472, -0.132582521472),
    float2(-0.132582521472, 0.132582521472),
    float2(-0.0485285709567, -0.181111092429),
    float2(0.0485285709567, -0.181111092429),
    float2(0.132582521472, -0.132582521472),
    float2(0.181111092429, -0.0485285709567),
    float2(0.308652606436, 0.0488857703251),
    float2(0.278439538809, 0.141872031169),
    float2(0.220970869121, 0.220970869121),
    float2(-0.278439538809, 0.141872031169),
    float2(0.141872031169, 0.278439538809),
    float2(-0.308652606436, 0.0488857703251),
    float2(0.0488857703251, 0.308652606436),
    float2(-0.308652606436, -0.0488857703251),
    float2(-0.0488857703251, 0.308652606436),
    float2(-0.278439538809, -0.141872031169),
    float2(-0.141872031169, 0.278439538809),
    float2(-0.220970869121, -0.220970869121),
    float2(-0.220970869121, 0.220970869121),
    float2(-0.141872031169, -0.278439538809),
    float2(-0.0488857703251, -0.308652606436),
    float2(0.0488857703251, -0.308652606436),
    float2(0.141872031169, -0.278439538809),
    float2(0.220970869121, -0.220970869121),
    float2(0.278439538809, -0.141872031169),
    float2(0.308652606436, -0.0488857703251),
    float2(0.434749091828, 0.0489844582952),
    float2(0.41294895701, 0.144497089605),
    float2(0.370441837162, 0.232764033475),
    float2(0.309359216769, 0.309359216769),
    float2(-0.370441837162, 0.232764033475),
    float2(0.232764033475, 0.370441837162),
    float2(-0.41294895701, 0.144497089605),
    float2(0.144497089605, 0.41294895701),
    float2(-0.434749091828, 0.0489844582952),
    float2(0.0489844582952, 0.434749091828),
    float2(-0.434749091828, -0.0489844582952),
    float2(-0.0489844582952, 0.434749091828),
    float2(-0.41294895701, -0.144497089605),
    float2(-0.144497089605, 0.41294895701),
    float2(-0.370441837162, -0.232764033475),
    float2(-0.232764033475, 0.370441837162),
    float2(-0.309359216769, -0.309359216769),
    float2(-0.309359216769, 0.309359216769),
    float2(-0.232764033475, -0.370441837162),
    float2(-0.144497089605, -0.41294895701),
    float2(-0.0489844582952, -0.434749091828),
    float2(0.0489844582952, -0.434749091828),
    float2(0.144497089605, -0.41294895701),
    float2(0.232764033475, -0.370441837162),
    float2(0.309359216769, -0.309359216769),
    float2(0.370441837162, -0.232764033475),
    float2(0.41294895701, -0.144497089605),
    float2(0.434749091828, -0.0489844582952),
    float2(0.560359517677, 0.0490251052956),
    float2(0.543333277288, 0.14558571287),
    float2(0.509798130208, 0.237722772229),
    float2(0.460773024913, 0.322636745447),
    float2(0.397747564417, 0.397747564417),
    float2(-0.460773024913, 0.322636745447),
    float2(0.322636745447, 0.460773024913),
    float2(-0.509798130208, 0.237722772229),
    float2(0.237722772229, 0.509798130208),
    float2(-0.543333277288, 0.14558571287),
    float2(0.14558571287, 0.543333277288),
    float2(-0.560359517677, 0.0490251052956),
    float2(0.0490251052956, 0.560359517677),
    float2(-0.560359517677, -0.0490251052956),
    float2(-0.0490251052956, 0.560359517677),
    float2(-0.543333277288, -0.14558571287),
    float2(-0.14558571287, 0.543333277288),
    float2(-0.509798130208, -0.237722772229),
    float2(-0.237722772229, 0.509798130208),
    float2(-0.460773024913, -0.322636745447),
    float2(-0.322636745447, 0.460773024913),
    float2(-0.397747564417, -0.397747564417),
    float2(-0.397747564417, 0.397747564417),
    float2(-0.322636745447, -0.460773024913),
    float2(-0.237722772229, -0.509798130208),
    float2(-0.14558571287, -0.543333277288),
    float2(-0.0490251052956, -0.560359517677),
    float2(0.0490251052956, -0.560359517677),
    float2(0.14558571287, -0.543333277288),
    float2(0.237722772229, -0.509798130208),
    float2(0.322636745447, -0.460773024913),
    float2(0.397747564417, -0.397747564417),
    float2(0.460773024913, -0.322636745447),
    float2(0.509798130208, -0.237722772229),
    float2(0.543333277288, -0.14558571287),
    float2(0.560359517677, -0.0490251052956),
    float2(0.685748328795, 0.0490456884495),
    float2(0.671788470355, 0.146138636568),
    float2(0.644152935937, 0.240256623474),
    float2(0.603404305327, 0.32948367837),
    float2(0.550372103135, 0.412003395727),
    float2(0.486135912066, 0.486135912066),
    float2(-0.550372103135, 0.412003395727),
    float2(0.412003395727, 0.550372103135),
    float2(-0.603404305327, 0.32948367837),
    float2(0.32948367837, 0.603404305327),
    float2(-0.644152935937, 0.240256623474),
    float2(0.240256623474, 0.644152935937),
    float2(-0.671788470355, 0.146138636568),
    float2(0.146138636568, 0.671788470355),
    float2(-0.685748328795, 0.0490456884495),
    float2(0.0490456884495, 0.685748328795),
    float2(-0.685748328795, -0.0490456884495),
    float2(-0.0490456884495, 0.685748328795),
    float2(-0.671788470355, -0.146138636568),
    float2(-0.146138636568, 0.671788470355),
    float2(-0.644152935937, -0.240256623474),
    float2(-0.240256623474, 0.644152935937),
    float2(-0.603404305327, -0.32948367837),
    float2(-0.32948367837, 0.603404305327),
    float2(-0.550372103135, -0.412003395727),
    float2(-0.412003395727, 0.550372103135),
    float2(-0.486135912066, -0.486135912066),
    float2(-0.486135912066, 0.486135912066),
    float2(-0.412003395727, -0.550372103135),
    float2(-0.32948367837, -0.603404305327),
    float2(-0.240256623474, -0.644152935937),
    float2(-0.146138636568, -0.671788470355),
    float2(-0.0490456884495, -0.685748328795),
    float2(0.0490456884495, -0.685748328795),
    float2(0.146138636568, -0.671788470355),
    float2(0.240256623474, -0.644152935937),
    float2(0.32948367837, -0.603404305327),
    float2(0.412003395727, -0.550372103135),
    float2(0.486135912066, -0.486135912066),
    float2(0.550372103135, -0.412003395727),
    float2(0.603404305327, -0.32948367837),
    float2(0.644152935937, -0.240256623474),
    float2(0.671788470355, -0.146138636568),
    float2(0.685748328795, -0.0490456884495),
    float2(0.811017637806, 0.0490575291556),
    float2(0.799191174395, 0.146457218224),
    float2(0.775710704038, 0.241721231257),
    float2(0.740918624869, 0.33346040443),
    float2(0.695322283745, 0.420336974019),
    float2(0.639586577995, 0.501084084011),
    float2(0.574524259714, 0.574524259714),
    float2(-0.639586577995, 0.501084084011),
    float2(0.501084084011, 0.639586577995),
    float2(-0.695322283745, 0.420336974019),
    float2(0.420336974019, 0.695322283745),
    float2(-0.740918624869, 0.33346040443),
    float2(0.33346040443, 0.740918624869),
    float2(-0.775710704038, 0.241721231257),
    float2(0.241721231257, 0.775710704038),
    float2(-0.799191174395, 0.146457218224),
    float2(0.146457218224, 0.799191174395),
    float2(-0.811017637806, 0.0490575291556),
    float2(0.0490575291556, 0.811017637806),
    float2(-0.811017637806, -0.0490575291556),
    float2(-0.0490575291556, 0.811017637806),
    float2(-0.799191174395, -0.146457218224),
    float2(-0.146457218224, 0.799191174395),
    float2(-0.775710704038, -0.241721231257),
    float2(-0.241721231257, 0.775710704038),
    float2(-0.740918624869, -0.33346040443),
    float2(-0.33346040443, 0.740918624869),
    float2(-0.695322283745, -0.420336974019),
    float2(-0.420336974019, 0.695322283745),
    float2(-0.639586577995, -0.501084084011),
    float2(-0.501084084011, 0.639586577995),
    float2(-0.574524259714, -0.574524259714),
    float2(-0.574524259714, 0.574524259714),
    float2(-0.501084084011, -0.639586577995),
    float2(-0.420336974019, -0.695322283745),
    float2(-0.33346040443, -0.740918624869),
    float2(-0.241721231257, -0.775710704038),
    float2(-0.146457218224, -0.799191174395),
    float2(-0.0490575291556, -0.811017637806),
    float2(0.0490575291556, -0.811017637806),
    float2(0.146457218224, -0.799191174395),
    float2(0.241721231257, -0.775710704038),
    float2(0.33346040443, -0.740918624869),
    float2(0.420336974019, -0.695322283745),
    float2(0.501084084011, -0.639586577995),
    float2(0.574524259714, -0.574524259714),
    float2(0.639586577995, -0.501084084011),
    float2(0.695322283745, -0.420336974019),
    float2(0.740918624869, -0.33346040443),
    float2(0.775710704038, -0.241721231257),
    float2(0.799191174395, -0.146457218224),
    float2(0.811017637806, -0.0490575291556),
    float2(0.936215188832, 0.0490649589778),
    float2(0.925957819308, 0.146657310975),
    float2(0.905555462146, 0.242642854784),
    float2(0.875231649841, 0.335969952699),
    float2(0.835318616427, 0.425616093506),
    float2(0.786253657449, 0.510599095327),
    float2(0.728574338866, 0.589987866609),
    float2(0.662912607362, 0.662912607362),
    float2(-0.728574338866, 0.589987866609),
    float2(0.589987866609, 0.728574338866),
    float2(-0.786253657449, 0.510599095327),
    float2(0.510599095327, 0.786253657449),
    float2(-0.835318616427, 0.425616093506),
    float2(0.425616093506, 0.835318616427),
    float2(-0.875231649841, 0.335969952699),
    float2(0.335969952699, 0.875231649841),
    float2(-0.905555462146, 0.242642854784),
    float2(0.242642854784, 0.905555462146),
    float2(-0.925957819308, 0.146657310975),
    float2(0.146657310975, 0.925957819308),
    float2(-0.936215188832, 0.0490649589778),
    float2(0.0490649589778, 0.936215188832),
    float2(-0.936215188832, -0.0490649589778),
    float2(-0.0490649589778, 0.936215188832),
    float2(-0.925957819308, -0.146657310975),
    float2(-0.146657310975, 0.925957819308),
    float2(-0.905555462146, -0.242642854784),
    float2(-0.242642854784, 0.905555462146),
    float2(-0.875231649841, -0.335969952699),
    float2(-0.335969952699, 0.875231649841),
    float2(-0.835318616427, -0.425616093506),
    float2(-0.425616093506, 0.835318616427),
    float2(-0.786253657449, -0.510599095327),
    float2(-0.510599095327, 0.786253657449),
    float2(-0.728574338866, -0.589987866609),
    float2(-0.589987866609, 0.728574338866),
    float2(-0.662912607362, -0.662912607362),
    float2(-0.662912607362, 0.662912607362),
    float2(-0.589987866609, -0.728574338866),
    float2(-0.510599095327, -0.786253657449),
    float2(-0.425616093506, -0.835318616427),
    float2(-0.335969952699, -0.875231649841),
    float2(-0.242642854784, -0.905555462146),
    float2(-0.146657310975, -0.925957819308),
    float2(-0.0490649589778, -0.936215188832),
    float2(0.0490649589778, -0.936215188832),
    float2(0.146657310975, -0.925957819308),
    float2(0.242642854784, -0.905555462146),
    float2(0.335969952699, -0.875231649841),
    float2(0.425616093506, -0.835318616427),
    float2(0.510599095327, -0.786253657449),
    float2(0.589987866609, -0.728574338866),
    float2(0.662912607362, -0.662912607362),
    float2(0.728574338866, -0.589987866609),
    float2(0.786253657449, -0.510599095327),
    float2(0.835318616427, -0.425616093506),
    float2(0.875231649841, -0.335969952699),
    float2(0.905555462146, -0.242642854784),
    float2(0.925957819308, -0.146657310975),
    float2(0.936215188832, -0.0490649589778)
    };

    #endif